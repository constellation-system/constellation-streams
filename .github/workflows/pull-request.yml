name: Pull request builder

run-name: Pull request for ${{ github.head_ref }} by ${{ github.actor }}

env:
  LINT_FLAGS: -W clippy::all -W clippy::pedantic -W clippy::cargo
  RUST_TOOLCHAIN: 'nightly-2024-07-21'
  LLVM_VERSION: 18

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - 'devel'

permissions: {}

jobs:
  format:
    name: Format check
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Cache
        uses: actions/cache@v3
        env:
          cache-name: cache-rust-crates
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Setup toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          override: true
          components: rustfmt

      - name: Install GSSAPI development packages
        uses: ConorMacBride/install-package@v1
        with:
          apt: libkrb5-dev

      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check --verbose

  check:
    name: Compile warnings
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Cache
        uses: actions/cache@v3
        env:
          cache-name: cache-rust-crates
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Setup toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          override: true

      - name: Install GSSAPI development packages
        uses: ConorMacBride/install-package@v1
        with:
          apt: libkrb5-dev

      - name: Check for compile warnings
        uses: actions-rs/cargo@v1
        with:
          command: check

  lint:
    name: Lint check
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      checks: write
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Cache
        uses: actions/cache@v3
        env:
          cache-name: cache-rust-crates
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Setup toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          override: true
          components: clippy

      - name: Install GSSAPI development packages
        uses: ConorMacBride/install-package@v1
        with:
          apt: libkrb5-dev

      - name: Lint check
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: -- ${{ env.LINT_PARAMS }}

  audit:
    name: Dependency audit
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Cache
        uses: actions/cache@v3
        env:
          cache-name: cache-rust-crates
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Setup toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          override: true

      - name: Install GSSAPI development packages
        uses: ConorMacBride/install-package@v1
        with:
          apt: libkrb5-dev

      - name: Install cargo-audit
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-audit --locked

      - name: Audit code
        uses: actions-rs/cargo@v1
        with:
          command: audit

  license:
    name: License header check
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Cache
        uses: actions/cache@v3
        env:
          cache-name: cache-rust-crates
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Check license header
        uses: apache/skywalking-eyes/header@main

  test-debug:
    name: Run tests with debug build
    needs: [format, check, lint, audit, license]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-14]
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Cache
        uses: actions/cache@v3
        env:
          cache-name: cache-rust-crates
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Setup toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          override: true

      - name: Install GSSAPI development and LLVM-${{ env.LLVM_VERSION }}
        uses: ConorMacBride/install-package@v1
        with:
          apt: libkrb5-dev llvm-${{ env.LLVM_VERSION }}
          brew: llvm@${{ env.LLVM_VERSION }}

      - name: Generate test certificates
        run: sh gen_test_certs.sh

      - name: Run tests
        if: matrix.os == 'ubuntu-24.04'
        uses: actions-rs/cargo@v1
        with:
          command: test
        env:
          RUSTFLAGS: '-Cinstrument-coverage -Ccodegen-units=1 -Clink-dead-code'
          LLVM_PROFILE_FILE: 'target/coverage/profile_%m_%p.profraw'

      - name: Run tests
        if: matrix.os == 'macos-14'
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-default-features --features log,openssl,unix
        env:
          RUSTFLAGS: '-Cinstrument-coverage -Ccodegen-units=1 -Clink-dead-code --remap-path-prefix=${{ github.workspace }}='
          LLVM_PROFILE_FILE: 'target/coverage/${{ runner.os }}_%m_%p.profraw'

      - name: Generate coverage report
        if: matrix.os == 'ubuntu-24.04'
        run: |
          llvm-profdata-${{ env.LLVM_VERSION }} merge --sparse target/coverage/*.profraw -o target/coverage/coverage.profdata
          SRCS=""
          for f in `find src -type f -regex ".*\.rs"`; do SRCS+="$f "; done
          TESTBINS=""
          CRATE_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]' | cut -f2 -d"/")
          for f in `find target/debug/deps -type f -regex "target/debug/deps/$CRATE_NAME\-[0-9a-f]*$"`; do TESTBINS+="$f "; done
          llvm-cov-${{ env.LLVM_VERSION }} export --format=lcov --ignore-filename-regex="$HOME/.cargo/*|/rustc/" --instr-profile=target/coverage/coverage.profdata `echo $TESTBINS` `echo $SRCS` > target/coverage/${{ runner.os }}-coverage.lcov

      - name: Generate coverage report
        if: matrix.os == 'macos-14'
        run: |
          /opt/homebrew/bin/brew link llvm@18
          /opt/homebrew/bin/llvm-profdata merge --sparse target/coverage/*.profraw -o target/coverage/coverage.profdata
          SRCS=""
          for f in `find src -type f -regex ".*\.rs"`; do SRCS+="$f "; done
          TESTBINS=""
          CRATE_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]' | cut -f2 -d"/")
          for f in `find target/debug/deps -type f -regex "target/debug/deps/$CRATE_NAME\-[0-9a-f]*$"`; do TESTBINS+="$f "; done
          /opt/homebrew/bin/llvm-cov export --format=lcov --ignore-filename-regex="$HOME/.cargo/*|/rustc/" --instr-profile=target/coverage/coverage.profdata `echo $TESTBINS` `echo $SRCS` > target/coverage/${{ runner.os }}-coverage.lcov

      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}
          path: target/coverage/${{ runner.os }}-coverage.lcov
          if-no-files-found: error

  test-release:
    name: Run tests with release build
    needs: [format, check, lint, audit, license]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-14]
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Cache
        uses: actions/cache@v3
        env:
          cache-name: cache-rust-crates
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Setup toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          override: true

      - name: Install GSSAPI development packages
        uses: ConorMacBride/install-package@v1
        with:
          apt: libkrb5-dev

      - name: Generate test certificates
        run: sh gen_test_certs.sh

      - name: Run tests
        if: matrix.os == 'ubuntu-24.04'
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release

      - name: Run tests
        if: matrix.os == 'macos-14'
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --no-default-features --features log,openssl,unix

  coverage-report:
    name: Generate coverage report
    needs: [test-debug]
    runs-on: ubuntu-24.04
    permissions:
      pull-requests: write
    steps:
      - name: Install lcov
        uses: ConorMacBride/install-package@v1
        with:
          apt: lcov

      - name: Download ubuntu-24.04 coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-ubuntu-24.04

      - name: Download macos-14 coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-macos-14

      - name: Merge lcov files
        run: lcov -a Linux-coverage.lcov -t linux -a macOS-coverage.lcov -t macos -o coverage.lcov

      - name: Publish coverage report
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: coverage.lcov

  doc:
    name: Generate rustdoc
    needs: [test-debug, test-release]
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Cache
        uses: actions/cache@v3
        env:
          cache-name: cache-rust-crates
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Setup toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          override: true

      - name: Install GSSAPI development packages
        uses: ConorMacBride/install-package@v1
        with:
          apt: libkrb5-dev

      - name: Build documentation
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --no-deps

      - name: Patch documentation
        run: |
          CRATE_NAME=$(echo '${{ github.repository }}' | tr `[:upper:]` '[:lower:]' | cut -f2 -d"/")
          echo "<meta http-equiv=\"refresh\" content=\"0; url=${CRATE_NAME/-/_}\">" > target/doc/index.html
          touch target/doc/.nojekyll

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: rustdoc
          path: target/doc
